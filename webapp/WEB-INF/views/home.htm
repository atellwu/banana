<!DOCTYPE html>
<!-- saved from url=(0032)http://html5demos.com/dnd-upload -->
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<meta name="viewport" content="width=620">
<title>HTML5 Demo: Drag and drop, automatic upload</title>
<style>
#adzerk_by {
	display: none
}

/* vert */
.carbonad {
	background-color: #FBFBFB;
	border: 2px solid #E8E8E8;
	height: 215px;
	line-height: 1.2;
	width: 150px;
}

.carbonad-img {
	float: left;
	height: 100px;
	margin-left: 11px;
	margin-top: 11px;
	width: 130px;
}

.carbonad-text {
	color: #545454;
	float: left;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11px;
	font-weight: normal;
	height: 50px;
	margin-left: 15px;
	margin-top: 9px;
	width: 119px;
}

.carbonad-text a {
	color: #545454;
	text-decoration: none;
	font-weight: bold;
}

.carbonad-tag {
	color: #999999;
	float: left;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11px;
	font-weight: normal;
	margin-left: 17px;
	margin-top: 15px;
	padding-top: 5px;
}

.carbonad-tag a {
	color: #999999;
	text-align: center;
	text-decoration: none;
	font-weight: bold;
}
</style>

<style>
#holder {
	border: 10px dashed #DDD;
	width: 600px;
	min-height: 400px;
	margin: 20px auto;
}

#holder.hover {
	border: 10px dashed #0c0;
}

#holder img {
	display: block;
	margin: 10px auto;
}

#holder p {
	margin: 10px;
	font-size: 14px;
}

progress {
	width: 100%;
}

progress:after {
	content: '%';
}

.fail {
	background: #c00;
	padding: 2px;
	color: #fff;
}

.hidden {
	display: none !important;
}
</style>

</head>
<body class="">
	<section id="wrapper">
		<header>
			<h1 align="center">快到框里来！</h1>
		</header>

		<article>
			<div id="holder"></div>
			<p id="upload" class="hidden">
				<label>Drag &amp; drop not supported, but you can still
					upload via this input field:<br> <input type="file">
				</label>
			</p>
			<p id="filereader" class="hidden">File API &amp; FileReader API
				not supported</p>
			<p id="formdata" class="hidden">XHR2's FormData is not supported</p>
			<p id="progress" class="hidden">XHR2's upload progress isn't
				supported</p>
			<p>
				<progress id="uploadprogress" min="0" max="100" value="0">0</progress>
			</p>
		</article>
		<script>
			var holder = document.getElementById('holder'), tests = {
				filereader : typeof FileReader != 'undefined',
				dnd : 'draggable' in document.createElement('span'),
				formdata : !!window.FormData,
				progress : "upload" in new XMLHttpRequest
			}, support = {
				filereader : document.getElementById('filereader'),
				formdata : document.getElementById('formdata'),
				progress : document.getElementById('progress')
			}, acceptedTypes = {
				'text/plain' : true
			}, progress = document.getElementById('uploadprogress'), fileupload = document
					.getElementById('upload');

			"filereader formdata progress".split(' ').forEach(function(api) {
				if (tests[api] === false) {
					support[api].className = 'fail';
				} else {
					// FFS. I could have done el.hidden = true, but IE doesn't support
					// hidden, so I tried to create a polyfill that would extend the
					// Element.prototype, but then IE10 doesn't even give me access
					// to the Element object. Brilliant.
					support[api].className = 'hidden';
				}
			});

			function previewfile(file) {
				if (tests.filereader === true
						&& acceptedTypes[file.type] === true) {
					var reader = new FileReader();
					reader.onload = function(event) {
						holder.innerHTML = [ '<iframe  frameborder="0" style="width:600px;min-height:400px" scrolling="auto" src="', event.target.result,
				                            '"/>' ]
								.join('');
					};

					reader.readAsDataURL(file);
				} else {
					holder.innerHTML += '<p>Uploaded ' + file.name + ' '
							+ (file.size ? (file.size / 1024 | 0) + 'K' : '');
					console.log(file);
				}
			}

			function readfiles(files) {
				debugger;
				var formData = tests.formdata ? new FormData() : null;
				for ( var i = 0; i < files.length; i++) {
					if (tests.formdata)
						formData.append('file', files[i]);
					previewfile(files[i]);
				}

				// now post a new XHR request
				if (tests.formdata) {
					var xhr = new XMLHttpRequest();
					xhr.open('POST', '/upload');
					xhr.onload = function() {
						progress.value = progress.innerHTML = 100;
						//done
	                    if (xhr.readyState==4 && xhr.status==200){
	                        window.location.href="result";
	                    }
					};

					if (tests.progress) {
						xhr.upload.onprogress = function(event) {
							if (event.lengthComputable) {
								var complete = (event.loaded / event.total
										* 100 | 0);
								progress.value = progress.innerHTML = complete;
							}
						}
					}

					xhr.send(formData);
					
					//done
					xhr.onreadystatechange=function(){
						if (xhr.readyState==4 && xhr.status==200){
	                        window.location.href="result";
	                    }
				     }
				}
			}

			if (tests.dnd) {
				holder.ondragover = function() {
					this.className = 'hover';
					return false;
				};
				holder.ondragend = function() {
					this.className = '';
					return false;
				};
				holder.ondrop = function(e) {
					this.className = '';
					e.preventDefault();
					readfiles(e.dataTransfer.files);
				}
			} else {
				fileupload.className = 'hidden';
				fileupload.querySelector('input').onchange = function() {
					readfiles(this.files);
				};
			}
		</script>
	</section>
</body>
</html>